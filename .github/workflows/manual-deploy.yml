name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.force_deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install
    
    - name: Run tests
      run: poetry run pytest tests/ -v

  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || inputs.force_deploy)
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --only=main
    
    - name: Build SAM application
      run: sam build --template template.yaml
    
    - name: Deploy to ${{ inputs.environment }}
      run: |
        if [ "${{ inputs.environment }}" = "production" ]; then
          GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID_PRODUCTION }}"
          GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET_PRODUCTION }}"
          ALLOWED_ORIGINS="${{ secrets.ALLOWED_ORIGINS_PRODUCTION }}"
        else
          GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID_STAGING }}"
          GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET_STAGING }}"
          ALLOWED_ORIGINS="${{ secrets.ALLOWED_ORIGINS_STAGING }}"
        fi
        
        sam deploy \
          --stack-name colino-backend-${{ inputs.environment }} \
          --s3-bucket ${{ secrets.SAM_S3_BUCKET }} \
          --s3-prefix ${{ inputs.environment }} \
          --region ${{ env.AWS_REGION }} \
          --capabilities CAPABILITY_IAM \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --parameter-overrides \
            GoogleClientId="$GOOGLE_CLIENT_ID" \
            GoogleClientSecret="$GOOGLE_CLIENT_SECRET" \
            AllowedOrigins="$ALLOWED_ORIGINS"
