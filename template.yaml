AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'YouTube OAuth Proxy Lambda Functions'

Globals:
  Function:
    Timeout: 30
    Runtime: python3.13
    Environment:
      Variables:
        GOOGLE_CLIENT_ID: !Ref GoogleClientId
        GOOGLE_CLIENT_SECRET: !Ref GoogleClientSecret
    Architectures:
      - x86_64
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID
    NoEcho: true
  
  GoogleClientSecret:
    Type: String
    Description: Google OAuth Client Secret
    NoEcho: true
  
  AllowedOrigins:
    Type: String
    Default: 'http://localhost:3000'
    Description: Comma-separated list of allowed CORS origins

Resources:
  # DynamoDB table for OAuth sessions - encrypted and short-lived
  OAuthSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-oauth-sessions"
      BillingMode: PAY_PER_REQUEST
      # Encryption at rest using AWS managed keys
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: alias/aws/dynamodb
      # Enable TTL for automatic cleanup
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      # Minimal schema - DynamoDB is schemaless
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      # Enable point-in-time recovery for extra security
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Lambda function for OAuth initiation
  AuthInitiateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: package/out/lambda.zip
      Handler: lambdas.auth_initiate.lambda_handler
      Environment:
        Variables:
          ALLOWED_ORIGINS: !Ref AllowedOrigins
          OAUTH_SESSIONS_TABLE: !Ref OAuthSessionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OAuthSessionsTable
      Events:
        AuthInitiate:
          Type: Api
          Properties:
            Path: /auth/initiate
            Method: get

  # Lambda function for OAuth callback
  AuthCallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: package/out/lambda.zip
      Handler: lambdas.auth_callback.lambda_handler
      Environment:
        Variables:
          ALLOWED_ORIGINS: !Ref AllowedOrigins
          OAUTH_SESSIONS_TABLE: !Ref OAuthSessionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OAuthSessionsTable
      Events:
        AuthCallback:
          Type: Api
          Properties:
            Path: /callback
            Method: get

  # NEW: Lambda function for polling tokens
  AuthPollFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: package/out/lambda.zip
      Handler: lambdas.auth_poll.lambda_handler
      Environment:
        Variables:
          OAUTH_SESSIONS_TABLE: !Ref OAuthSessionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OAuthSessionsTable
      Events:
        AuthPoll:
          Type: Api
          Properties:
            Path: /auth/poll/{session_id}
            Method: get

  # Lambda function for token refresh
  AuthRefreshFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: package/out/lambda.zip
      Handler: lambdas.auth_refresh.lambda_handler
      Environment:
        Variables:
          ALLOWED_ORIGINS: !Ref AllowedOrigins
          OAUTH_SESSIONS_TABLE: !Ref OAuthSessionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OAuthSessionsTable
      Events:
        AuthRefresh:
          Type: Api
          Properties:
            Path: /auth/refresh
            Method: post

Outputs:
  AuthInitiateApi:
    Description: "API Gateway endpoint URL for OAuth initiation"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/initiate"
  
  AuthCallbackApi:
    Description: "API Gateway endpoint URL for OAuth callback"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/callback"
    
  AuthPollApi:
    Description: "API Gateway endpoint URL for token polling"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/poll"
    
  AuthRefreshApi:
    Description: "API Gateway endpoint URL for token refresh"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/refresh"
  
  OAuthSessionsTableName:
    Description: "DynamoDB table name for OAuth sessions"
    Value: !Ref OAuthSessionsTable
